{"templateId":"598a10503004fda14f4367f7","templateType":"BLANK","name":"mapbox_boundaries","accountId":"598a104f3004fda14f436772","enabled":true,"type":"CUSTOM","components":[{"id":"598a17513004f4c2a3d84f9e","name":"style.css","type":"text/css","visualizationId":"598a17513004f4c2a3d84f9c","body":"/**\n * Copyright (C) Zoomdata, Inc. 2012-2017. All rights reserved.\n */\n.small text {\n    font-size:10px;\n}\n\n.medium text {\n    font-size: 12px;\n}\n\n.large text {\n    font-size:14px;\n}","order":0,"uploadDate":"2017-08-08 20:11:01.949"},{"id":"598a17513004f4c2a3d84f9d","name":"Visualization.js","type":"text/javascript","visualizationId":"598a17513004f4c2a3d84f9c","body":"/*\n * Copyright (C) Zoomdata, Inc. 2012-2017. All rights reserved.\n */\n/* global controller */\n\nvar dataLookup = {};\n\n//load mapbox and define a target div\n\nvar uuid = new Date().getTime();\nvar mapVarId = 'map-' + uuid;\nvar mapDiv = document.createElement('div');\nvar dataLookup = {};\nmapDiv.id = mapVarId;\nmapDiv.style='width:100%;height:100%;'\nvar map = null;\nvar currentlyVisibleLayer = undefined;\ndataLookup = {};\nvar mb_css = document.createElement('link');\nmb_css.href='https://api.mapbox.com/mapbox-gl-js/v0.36.0/mapbox-gl.css';\nmb_css.rel='stylesheet';\nvar mb_js = document.createElement('script');\nmb_js.src = 'https://api.mapbox.com/mapbox-gl-js/v0.36.0/mapbox-gl.js';\nmb_js.type='text/javascript';\nmb_js.onload = function() {\n    //mapbox has to be loaded before we do anything else\n    initializeMap();\n};\n\n\ncontroller.element.appendChild(mb_js);\ncontroller.element.appendChild(mb_css);\ncontroller.element.appendChild(mapDiv);\n\n//The variables set in the chart properties drive what layers are displayed.  This\n//chart uses administrative boundaries.  Users can choose which ones, level 0 through\n//level 3 are supported.  The property for each layer is selected; if the user\n//selects \"None\" then that layer shouldn't be displayed.  Dynamically calculate the\n//zoom levels based on the chart variables\nvar mapBoundariesLevels = {\n  adm0: {\n    level: 0,\n    source: \"admin-0\",\n    source_layer: \"boundaries_admin_0\",\n    minZoom: 0,\n    maxZoom: 5,\n    vtPropField: 'id',//'country_code',\n    dataPropField: 'adm0_id',\n    colorStops: [['', \"rgba(0,255,0,.5)\"]],\n    heightStops: [[0,0]]\n  }, adm1: {\n    level: 1,\n    source: \"admin-1\",\n    source_layer: \"boundaries_admin_1\",\n    minZoom: 5,\n    maxZoom: 9,\n    vtPropField: 'id',\n    dataPropField: 'adm1_id',\n    colorStops: [['', \"rgba(128,0,0,0)\"]],\n    heightStops: [[0,0]]\n  },adm2: {\n    level: 2,\n    source: \"admin-2\",\n    source_layer: \"boundaries_admin_2\",\n    minZoom: 9,\n    maxZoom: 16,\n    vtPropField: 'id',\n    dataPropField: 'adm2_id',\n    colorStops: [['', \"rgba(0,0,128,0)\"]],\n    heightStops: [[0,0]]\n  },adm3: {\n    level: 3,\n    source: \"admin-3\",\n    source_layer: \"boundaries_admin_3\",\n    minZoom: 16,\n    maxZoom: 22,\n    vtPropField: 'id',\n    dataPropField: 'adm3_id',\n    colorStops: [['', \"rgba(0,255,0,0)\"]],\n    heightStops: [[0,0]]\n  }\n}\n\nfunction getCurrentlyVisibleLayer() {\n  var result = undefined;\n  var currZoom = map.getZoom();\n  //iterate through the layer configurations, find the zoom level that matches current zoom\n  Object.keys(mapBoundariesLevels).forEach(function(levelKey) {\n    var level = mapBoundariesLevels[levelKey];\n    if((level.minZoom <= currZoom) && (currZoom <= level.maxZoom)) {\n      var testLayer = map.getLayer(level.source+'_base_fill');\n      if(testLayer) {\n        result = level;\n      }\n    }\n  })\n\n  return result;\n}\n\nfunction initializeMap() {\n    mapboxgl.accessToken =  controller.variables['Mapbox Access Token'];\n    map = new mapboxgl.Map({\n        container: mapDiv.id,\n        style: 'mapbox://styles/mapbox/streets-v9',\n        //TODO: issue with float variable type in CLI/chart studio needs to be resolved\n        //center: [controller.variables['Initial Map Center Lon'], controller.variables['Initial Map Center Lat']],\n        center: [0, 15.0],\n        zoom: 1.5, //TODO: add to controller variables\n        minZoom: 1.5 //TODO: add to controller variables\n        //TODO: maxBounds from controller variables\n    });\n    map.on('load', configureMap);\n    map.on('click', function (e) {\n      var features = map.queryRenderedFeatures(e.point);\n      console.log(\"On click: \", features);\n    });\n}\n\nfunction configureMap() {\n  var nav = new mapboxgl.NavigationControl();\n  map.addControl(nav, 'top-left');\n  map.addSource(\"admin-0\", {\n      type: \"vector\",\n      url: \"mapbox://mapbox.enterprise-boundaries-a0-v1\"\n  });\n\n  map.addSource(\"admin-1\", {\n      type: \"vector\",\n      url: \"mapbox://mapbox.enterprise-boundaries-a1-v1\"\n  });\n\n  map.addSource(\"admin-2\", {\n      type: \"vector\",\n      url: \"mapbox://mapbox.enterprise-boundaries-a2-v1\"\n  });\n\n  map.addSource(\"admin-3\", {\n      type: \"vector\",\n      url: \"mapbox://mapbox.enterprise-boundaries-a3-v1\"\n  });\n\n  Object.keys(mapBoundariesLevels).forEach(function(currKey) {\n  // for each level we want a fill (extruded) and a border\n    var boundary = mapBoundariesLevels[currKey];\n    console.log('Adding layer to map:', boundary.source+\"_base_fill\");\n    map.addLayer({\n        \"id\": boundary.source + \"_base_fill\",\n        \"type\": \"fill-extrusion\",\n        \"source\": boundary.source,\n        \"source-layer\": boundary.source_layer,\n        minzoom: boundary.minZoom,\n        maxzoom: boundary.maxZoom,\n        \"paint\": {\n          \"fill-extrusion-color\": \"green\",\n          \"fill-extrusion-opacity\": .6,\n          \"fill-extrusion-height\": 0\n        }\n    }, 'waterway-label');\n\n\n      map.addLayer({\n          id: boundary.source + \"_layer_borders\",\n          type: \"line\",\n          source: boundary.source,\n          minzoom: boundary.minZoom,\n          maxzoom: boundary.maxZoom,\n          \"source-layer\": boundary.source_layer,\n          layout: {},\n          paint: {\n              \"line-color\": \"darkgray\",\n              \"line-width\": 1\n          }\n      });\n  });\n  currentlyVisibleLayer = getCurrentlyVisibleLayer();\n  console.log('At start the visible layer is', currentlyVisibleLayer);\n  setStops(dataLookup, currentlyVisibleLayer, map.queryRenderedFeatures());\n  //Setting the map events here, they require the layers have been\n  //added already\n  map.on('zoom', function() {\n//    console.log('Map zoom level is :', map.getZoom());\n    //when the user zooms to a level that changes the visible layer\n    // then we need to rebuild the query accordingly\n    var visibleLayerAfterZoom = getCurrentlyVisibleLayer();\n    if(visibleLayerAfterZoom.source !== currentlyVisibleLayer.source) {\n      console.log(\"Changing visible layer on zoom\");\n      currentlyVisibleLayer = visibleLayerAfterZoom;\n      var currGroup = controller.dataAccessors['Group By'].getGroup();\n      currGroup.name = currentlyVisibleLayer.dataPropField;\n      //TODO: adjust limit dynamically to the number of featuers in the layer (or number of visible features, if we can do that)\nconsole.log('Setting new group ', currentlyVisibleLayer.dataPropField, ' for group ', currGroup);\n          controller.dataAccessors['Group By'].setGroup((currentlyVisibleLayer.dataPropField, currGroup));\n      //TODO: if we are filtering then we need to update filters here\n      // Changing the group by will cause controller.update, which does this: setStops(dataLookup, currentlyVisibleLayer, map.queryRenderedFeatures());\n    }\n  });\n  map.on('moveend', function() {\n    console.log('Map moveend');\n    //TODO: if we are filtering we need to update filters here\n  })\n\n    //map.on('mousemove', 'states_layer_base_fill', function(e) {console.log(e);});\n    //setStops(dataLookup, map.getLayer('counties_base_fill'));\n    console.log(\"Map configuration complete\");\n}\n\ncontroller.update = function(data, progress) {\n    // Called when new data arrives\n//    console.log('Controller update ', progress, ' with data ', data);\n    dataLookup = {};\n    for (var i = 0; i < data.length; i++) {\n        var item = data[i];\n        dataLookup[item.group] = item;\n    }\n\n    //set the style for each polygon based on the value of the data\n    if(map !== null) {\n        var currLayer = getCurrentlyVisibleLayer();\n        if(currLayer) {\n            setStops(dataLookup, currLayer, map.queryRenderedFeatures());\n        }\n    }\n\n\n};\n\n  function getMetrics()  {\n      var dataAccessors = controller.dataAccessors;\n      var metrics = {};\n\n      _.forOwn(dataAccessors, function(value, key) {\n          if (value.TYPE === value.TYPES.METRIC ||\n              value.TYPE === value.TYPES.MULTI_METRIC) {\n              metrics[key] = value;\n          }\n      });\n\n      return metrics;\n  }\n\nfunction setStops(data, layer, features) {\n  console.log('setting stops for ', layer, ' against data ', data);\n    var stopsArray = [];\n    var heightStopsArray = [];\n    var defaultColor = 'gray';\n    var defaultHeight = 0;\n    //TODO: only for features in currently visible layer\n\n    Object.keys(dataLookup).forEach(function(currAttributeKey) {\n      var val = dataLookup[currAttributeKey];\n      if(val.group[0] !== null) { //Mapbox GL doesn't like stops with null\n        var metrics = getMetrics();\n        var currentMetricVal = metrics.Color.raw(val);\n        var fillColor = metrics.Color.color(dataLookup[val.group]);\n        var red = parseInt(fillColor.substring(1,3), 16);\n        var green = parseInt(fillColor.substring(3,5), 16);\n        var blue = parseInt(fillColor.substring(5), 16);\n        var rgba = \"rgba(\" + red + \",\" + green + \",\" + blue + \",0.8)\";\n        stopsArray.push([val.group[0], rgba]);\n//      var height = dataLookup[feature.properties.GEOID].current.count < 65000 ? dataLookup[feature.properties.name].current.count : 65000;\n//      heightStopsArray.push([feature.properties.GEOID, height]);\n      }\n    });\n\n/*\n    features.forEach(function(feature) {\n        //look up the color using the Zoomdata data and the Zoomdata colors\n        var currFieldName = layer.vtPropField;\n        console.log(feature.layer.id);\n        if((feature.layer.id === layer.source+'_base_fill') && (feature.properties[currFieldName] in dataLookup)) { //TODO: property name different for layers\n            console.log('found feature match:', feature.properties[currFieldName])\n              var fillColor = getMetrics().Color.color(dataLookup[feature.properties.name]);\n              var red = parseInt(fillColor.substring(1,3), 16);\n              var green = parseInt(fillColor.substring(3,5), 16);\n              var blue = parseInt(fillColor.substring(5), 16);\n              var rgba = \"rgba(\" + red + \",\" + green + \",\" + blue + \",1)\";\n              stopsArray.push([feature.properties[currFieldName], rgba])\n              var height = dataLookup[feature.properties[currFieldName]].current.count < 65000 ? dataLookup[feature.properties[currFieldName]].current.count : 65000;\n              heightStopsArray.push([feature.properties[currFieldName], height]);\n        } else {\n//            stopsArray.push([feature.properties[currFieldName], defaultColor]);\n//            heightStopsArray.push([feature.properties[currFieldName], defaultHeight]);\n        }\n    });\n*/\nconsole.log('setting stops for layer ', layer.source+'_base_fill', \" on property\", layer.vtPropField);\n    map.setPaintProperty(layer.source+'_base_fill', 'fill-extrusion-color', {\n                  property: layer.vtPropField,\n                  type: 'categorical',\n                  stops: stopsArray,\n                  default: 'lightgray'\n        } );\n/*\n    map.setPaintProperty(layer.id, 'fill-extrusion-opacity', 0.5);\n    map.setPaintProperty(layer.id, 'fill-extrusion-height', {\n        property: \"GEOID\",\n        type: 'categorical',\n        stops: heightStopsArray\n    })\n    */\n    console.log('Stops set to ', stopsArray);\n}\ncontroller.resize = function(width, height, size) {\n    // Called when the widget is resized\n    if(map) { map.resize(); }\n};\n\ncontroller.createAxisLabel({\n  picks: 'Color', // Variable Name\n  orientation: 'horizontal',\n  position: 'bottom',\n  popoverTitle: 'Metric'\n});\n","order":1,"uploadDate":"2017-08-29 15:08:55.923"}],"libs":["lodash.min.js"],"objectFieldTypes":["TIME","NUMBER","MONEY","ATTRIBUTE","INTEGER"],"controls":["UberStyle","DirtyDataIndicator","FiltersIndicator","Undo","Info","TimePlayer","Filters","Defaults","Bookmark","Zoom","NoDataIndicator","TimeTable","Share","Download"],"variables":[{"name":"Group By","type":"group","descr":"","attributeType":["ATTRIBUTE","TIME"],"defaultValue":"","colorMetric":false,"colorNumb":0,"groupType":"attribute","required":true},{"name":"Color","type":"metric","descr":"Color areas based on this metric","attributeType":["MONEY","INTEGER","NUMBER"],"defaultValue":[{"colorConfig":{"autoShowColorLegend":true},"name":"count"}],"colorMetric":false,"colorNumb":3,"metricType":"color","legendType":"palette","colorSet":"ZoomSequential","required":false},{"name":"Chart Name","type":"string","descr":"","defaultValue":"","colorMetric":false,"colorNumb":0,"required":false},{"name":"Chart Description","type":"string","descr":"","defaultValue":"","colorMetric":false,"colorNumb":0,"required":false},{"name":"Mapbox Access Token","type":"string","descr":"Toke from https://www.mapbox.com/studio/account/tokens","defaultValue":"pk.eyJ1IjoibXdlcmxpbmciLCJhIjoiY2oxZzRlbnZjMDAwYTJ3cDZma3Vwa3NwbCJ9.-UCNWOrDq739KrtAcPJxaw","colorMetric":false,"colorNumb":0,"required":false},{"name":"Height","type":"metric","descr":"Values control the extruded height of the polygon","attributeType":["MONEY","INTEGER","NUMBER"],"defaultValue":[{"name":"count"}],"colorMetric":false,"colorNumb":0,"required":false}]}